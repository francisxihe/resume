import{_ as t,c as i,m as a,a as l,t as o,U as r,o as n}from"./chunks/framework.qvcCyPxx.js";const S=JSON.parse('{"title":"商品落地页","description":"","frontmatter":{"title":"商品落地页"},"headers":[],"relativePath":"interview/commodity-landing-page.md","filePath":"interview/commodity-landing-page.md"}'),d={name:"interview/commodity-landing-page.md"},s={id:"frontmatter-title",tabindex:"-1"},p=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),c=r('<p>用户从直播页面进入，优先认为是 4G 网或者 wifi</p><h3 id="工程化" tabindex="-1">工程化： <a class="header-anchor" href="#工程化" aria-label="Permalink to &quot;工程化：&quot;">​</a></h3><p>静态资源上 cdn，缓存策略其实原本就有。</p><ol><li><p>页面动态引入并且首页引用的代码单独打包（SplitChunksPlugin），避免加载过多的项目公共代码，当然这个地方其实能优化的空间非常大，但是考虑实际开发成本，只把所有首页用到的包拆出来了</p></li><li><p>尽量使用矢量图标替代位图并且合并成单文件，非矢量图标用 base64</p></li></ol><h3 id="代码优化" tabindex="-1">代码优化： <a class="header-anchor" href="#代码优化" aria-label="Permalink to &quot;代码优化：&quot;">​</a></h3><ol><li><p>优先加载首屏图片，并且所有非动态内容的容器都必须固定大小，避免过多重排，减少 LCP 的时间和 CLS</p></li><li><p>扁平化页面结构，强化 BEM 规则，减少 DOM 和 CSS 层级，降低构建 DOM 树和 CSS 树的时间，代码质量提升但渲染时间提升不大。除了商品信息等基础功能外，大部分都是营销相关的业务，都是页面加载完成之后用户执行事件后触发的，所以减少绝对定位元素来减少 Layers 层级意义不大。</p></li></ol><h3 id="交互优化" tabindex="-1">交互优化： <a class="header-anchor" href="#交互优化" aria-label="Permalink to &quot;交互优化：&quot;">​</a></h3><ol><li><p>优化整个登录流程，减少不必要的跳转</p></li><li><p>框架外层增加 Loading，增加骨架屏，首页用 Puppeteer 生成单独样式</p></li><li><p>接口优化，和服务端讨论将接口重组，按照优先级而非逻辑划分，确保相同优先级后端一个服务只出一个接口。每次请求对应的静态资源分段加载。</p><ol><li>通过对图片优先级进行定级同时监听图片的 onload 时间判断同一优先级图片是否加载完</li><li>不选择 lazyload 考虑兼容性，针对详情页所以视口的监测不是非常重要</li></ol></li></ol>',8);function _(e,h,m,f,u,g){return n(),i("div",null,[a("h1",s,[l(o(e.$frontmatter.title)+" ",1),p]),c])}const b=t(d,[["render",_]]);export{S as __pageData,b as default};
