import{_ as t,c as i,m as e,a as l,t as o,U as r,o as s}from"./chunks/framework.qvcCyPxx.js";const P=JSON.parse('{"title":"脚手架","description":"","frontmatter":{"title":"脚手架"},"headers":[],"relativePath":"interview/architecture/scaffold.md","filePath":"interview/architecture/scaffold.md"}'),n={name:"interview/architecture/scaffold.md"},c={id:"frontmatter-title",tabindex:"-1"},d=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),h=r('<h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>低代码平台需要有快速搭建和部署的功能 公司除了几个核心项目之外，需要开发维护大量短平快的项目和页面</p><h2 id="痛点" tabindex="-1">痛点 <a class="header-anchor" href="#痛点" aria-label="Permalink to &quot;痛点&quot;">​</a></h2><ol><li>官方脚手架只有基础功能，但在基础功能之外，依旧存在大量的重复工作</li><li>之前使用的方式是项目模版的方式，如果仅为了满足低代码平台的部署，问题不大。但是如果要 cover 我们的业务，这种形式远远不能满足需求。大而全的项目模版做减法依旧存在很多重复工作；小而精的脚手架做加法，本质和官方的脚手架区别不大；多种情况维护，模版项目过多，难以维护。</li></ol><h2 id="解决思路" tabindex="-1">解决思路 <a class="header-anchor" href="#解决思路" aria-label="Permalink to &quot;解决思路&quot;">​</a></h2><ol><li>脚手架的模式</li></ol><ul><li>umi 约定优于配置，通过中间层的抽象和插件化架构简化复杂应用的开发和维护，优点，隐藏所有基础配置，代码相对不易腐坏</li><li>vue-cli 配置生成代码，通过脚手架生成代码，优点，学习成本低，易上手，易于开发且开发周期短</li></ul><p>权衡开发效率和项目控制，主要采用配置生成代码，封装一些打包工具的基本配置用最佳实现的方式引入项目中</p><ol start="2"><li>功能 A、B 两个仓库，A 仓库存放基础的项目，B 仓库存放包含所有功能的项目，根据用户执行命令的配置，将 B 仓中对应的的代码复制到 A 仓。</li></ol><ul><li>为什么需要 B 仓库，而不是直接生成对应功能的代码，因为部分和项目存在耦合，如果写测试用例工作量太大，通过直接写在项目中这种方式，可以直接通过功能测试确定代码的正确性。</li></ul><ol start="3"><li><p>实现方式</p><ol><li>node 读取完配置之后，找到对应的功能的配置，比如 permission 的功能配置需要，复制 api 中对应调用接口的文件，在 router 中增加处理，views 生成权限管理的页面等等</li><li>复制文件直接通过 node fs 模块，修改文件需要将源文件和目标文件都转换成 AST 的语法，然后通过配置信息进行插入或者替换</li></ol></li></ol><h2 id="目标达成" tabindex="-1">目标达成 <a class="header-anchor" href="#目标达成" aria-label="Permalink to &quot;目标达成&quot;">​</a></h2><ol><li><p>重新梳理了项目的结构，包括 mock、css 的规范，以及一些通用的配置(code snippet)</p></li><li><p>包括了 monorepo、vue2、vue3、小程序这几种框架，可以通过命令行快速搭建登录、权限及权限管理、系统管理、OA 流程、门户页面、驾驶舱、dashboard、通用的 CURD 列表编辑详情页</p></li></ol>',13);function _(a,p,f,u,m,b){return s(),i("div",null,[e("h1",c,[l(o(a.$frontmatter.title)+" ",1),d]),h])}const k=t(n,[["render",_]]);export{P as __pageData,k as default};
