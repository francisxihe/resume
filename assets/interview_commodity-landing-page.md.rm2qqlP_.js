import{_ as a,c as e,o as i,U as t}from"./chunks/framework.qvcCyPxx.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/commodity-landing-page.md","filePath":"interview/commodity-landing-page.md"}'),o={name:"interview/commodity-landing-page.md"},p=t('<p>很多时候看大厂的性能优化方案就是在听天书一样，各种听懂听不懂的词汇，一开始各种被唬住，后来就调侃又来贩卖焦虑。大厂是大厂，他们上亿的用户量决定了他们需要为了每一毫秒的提升投入大量的人力物力，当时的魔筷前端也就6 7个人的样子。</p><p>虽然<strong>常规操作没什么技术含量</strong>，随便搜索引擎一搜一大堆，基于当时前端的资源和能力，往往这些方式才是<strong>最具性价比</strong>的方式。</p><h3 id="常规改造" tabindex="-1">常规改造 <a class="header-anchor" href="#常规改造" aria-label="Permalink to &quot;常规改造&quot;">​</a></h3><p>问题分析：</p><p>我接手的时候页面静态资源，js代码150K，css代码30K，icon 20*1.5KB，正常商品轮播图3张大概1MB，商品介绍 图片5+ 每张200-300K，页面静态资源大小大概3MB</p><p>然用户从直播页面进入，优先认为是4G网或者wifi，通过 chrome 的性能和一些计算（结合4G和Fast 3G）发现做到秒开需要控制页面首次加载资源小于1M</p><p>done</p><p>js等代码已经在cdn上了</p><p>方案：</p><ol><li><p>静态资源优化</p></li><li><p>静态资源上cdn、icon全部用iconfont代替（制定标准，协调资源）</p></li><li><p>使用data-uri（base64）代替src引入</p></li><li><p>优先加载首屏图片、视频</p></li><li><p>使用async属性异步加载执行JavaScript</p></li><li><p>交互优化</p></li><li><p>优化整个登录流程，减少不必要的跳转（去除中间页，直接静默登录）</p></li><li><p>接口优化</p></li><li><p>和服务端讨论将接口重组，按照优先级而非逻辑划分，确保相同优先级后端一个服务只出一个接口</p></li></ol><h3 id="细节优化" tabindex="-1">细节优化 <a class="header-anchor" href="#细节优化" aria-label="Permalink to &quot;细节优化&quot;">​</a></h3><p>webp图片统一用canvas转base64</p><p>IOS时间处理</p><p>根据页面的DPI（window.devicePixelRatio）和网络环境（navigator.connection）</p><p>此处为语雀内容卡片，点击链接查看：<a href="https://www.yuque.com/u21222849/thgigg/anpda6" target="_blank" rel="noreferrer">https://www.yuque.com/u21222849/thgigg/anpda6</a></p><h3 id="自动化" tabindex="-1">自动化 <a class="header-anchor" href="#自动化" aria-label="Permalink to &quot;自动化&quot;">​</a></h3><p>通过第一阶段大刀阔斧的重构和第二阶段的细节优化，当时商品落地页页面性能已经基本满足业务需求。</p><p>自己针对这个页面其实做了挺多研究的，包括<strong>浏览器的生命周期</strong>，<strong>页面性能的指标</strong>。</p><p>正好当时做基建的同事在搞监控平台，我就和他讨论加上性能数据的收集的可行性，了解整个系统的设计之后就开始着手开发。</p><p>icon静态资源、css拆分成独立文件、js方法</p><h4 id="web-vitals" tabindex="-1">web-vitals <a class="header-anchor" href="#web-vitals" aria-label="Permalink to &quot;web-vitals&quot;">​</a></h4><p>此处为语雀内容卡片，点击链接查看：<a href="https://www.yuque.com/u21222849/thgigg/zxwfw1" target="_blank" rel="noreferrer">https://www.yuque.com/u21222849/thgigg/zxwfw1</a></p><p>图层</p><ol><li>元素是否产生滚动（即使overflow: scroll）也会导致产生新的图层</li><li>元素设置 absolute fixed 在新的图层</li><li>元素设置 will-change 在新的图层</li></ol><p>图层分离的好处 针对经常变化的元素（动画），可以有效减少重排重绘，只需要GPU参与，光栅线程耗时几乎为0</p>',25),l=[p];function n(r,s,c,d,h,g){return i(),e("div",null,l)}const u=a(o,[["render",n]]);export{_ as __pageData,u as default};
