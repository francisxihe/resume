import{_ as e,c as a,o as t,U as p}from"./chunks/framework.FDEiBaKT.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/supplier-placement.md","filePath":"interview/supplier-placement.md"}'),r={name:"interview/supplier-placement.md"},c=p('<p>50多个字段</p><h3 id="业务梳理" tabindex="-1">业务梳理： <a class="header-anchor" href="#业务梳理" aria-label="Permalink to &quot;业务梳理：&quot;">​</a></h3><p>供应商入驻设计之初3张子表单，随后扩充到5张表，50多个字段。因为会出现供应商提交审核失败，过很长一段时间才会再进入，中间的表单的更替，字段的增删改，会产生多版本的历史数据。而流转过程中，数据库存放是JSON数据，因为表单层级过深，会出现很多转译符号，服务端不能直接跑SQL修改历史数据，而用户基数比较大，也不能清掉历史数据让用户重新填写，所以前端必须要有一套稳定的数据兼容的方案来保证数据流转。</p><p>页面状态的判断，因为是多张表集合，所以用户第一次填写的时候不能让用户一张一张的填写，而是一个完成的流程下来，但是如何出现审核不通过的情况，要让用户直接进入不通过的表单进行修改即可。所以对每个子页面都要做好状态判断。</p><p>表单审核是多维度的，可以整张表单直接打回，也可以逐字段审核，而且逐字段也不是单纯的每个字段都需要审核，而是会有合并字段审核（比如证件有效期），父子关系都需要审核（比如商品类目，父级审核不通过，子级无需再审核），从数据处理上并不复杂，但对前端交互组件要求比较高。</p><h3 id="中间层设计" tabindex="-1">中间层设计： <a class="header-anchor" href="#中间层设计" aria-label="Permalink to &quot;中间层设计：&quot;">​</a></h3><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/21593696/1648860357419-0a21ed47-be8b-46cd-ae30-2db063f1a3d0.jpeg" alt=""></p><h4 id="历史数据兼容" tabindex="-1">历史数据兼容 <a class="header-anchor" href="#历史数据兼容" aria-label="Permalink to &quot;历史数据兼容&quot;">​</a></h4><p>这个功能模块分为两部分，全局会进行表单层面的兼容，进入子页面会进行字段层面的兼容</p><p>前端根据表单数量和字段判断当前数据版本，采用责任链模式 ，层层转换，最终得到稳定（可接受）的版本数据。</p><p>项目初期，字段变更非常频繁，如果采用直接转化，每次迭代都需要对历史所有版本的数据进行转化，数据管理错乱。而且有些版本的数据业务方不要向下兼容（认为是稳定版本）</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/21593696/1648811151130-c6fd49eb-2b2a-471b-89a6-24b6de20edef.jpeg" alt=""></p><h4 id="表单状态判断" tabindex="-1">表单状态判断 <a class="header-anchor" href="#表单状态判断" aria-label="Permalink to &quot;表单状态判断&quot;">​</a></h4><p>总表状态 子表状态</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/21593696/1648809202571-fdef4ebc-2924-40e6-bccd-1a2b977e3a4b.jpeg" alt=""></p><h4 id="页面数据处理" tabindex="-1">页面数据处理 <a class="header-anchor" href="#页面数据处理" aria-label="Permalink to &quot;页面数据处理&quot;">​</a></h4><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/21593696/1648861141711-3edd3dd3-cd98-498f-bb3d-da07e3225f9c.jpeg" alt=""></p><p>中间层这一块的设计确实费了很多心思，对于我个人来说肯定是得到成长了，毕竟做的时候把设计模式捋了一遍，记住多少不说，但是的确把思路打开了。</p><p>但是对公司来说这样的设计其实是不可靠的，把原本属于服务端的逻辑搬到了前端，而且还更复杂化了，当然后续的项目也放弃了这种模式。</p><p>页面交互这一块，成功完成了schemeForm的设计和开发。</p>',20),d=[c];function n(i,o,l,s,h,m){return t(),a("div",null,d)}const b=e(r,[["render",n]]);export{_ as __pageData,b as default};
