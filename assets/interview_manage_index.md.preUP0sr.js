import{_ as a,c as e,o as i,U as l}from"./chunks/framework.qvcCyPxx.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/manage/index.md","filePath":"interview/manage/index.md"}'),r={name:"interview/manage/index.md"},t=l('<p>公司业务背景</p><hr><ol><li><p>人心不稳定，我去的时候团队不到一个月陆续走了一半前端，有些人连照面都没碰，而且后端也有大量的人员调整，说明这个团队的稳定性问题始终都存在，需要挖出背后的原因。</p></li><li><p>职业规划不清，大家都不太理解前端能做什么、该做什么，对什么负责，可以做什么亮点，未来的职业路怎么做，做当下这些对未来职业路线有什么影响，自己将来做管理还是做架构，大家都理不清楚，当然也有些人就没想过弄清楚。</p></li><li><p>业务无感知，来活就干，没活就划水，不会考虑提效的问题，不清楚这个业务前线的销售在做什么，公司下一个季度的目标是什么，以及产品背后真正的问题和价值。</p></li><li><p>缺乏规范合作意识差，自测不充分上线后也概不关心，遇到问题也不擅长沟通解决，请教其他同学完成任务之后没想过消化，遇到调整就直接甩出去了。工具基建弱，几乎没有任何提效的研发工具，包括可执行的规范制度。</p></li><li><p>梯队不清晰，原先前端团队不能扛住业务方的压力，一来活就一股脑的全上，没有技术含量的业务也征用技术好的同学，而一些比较有难度的项目有会让技术欠缺的同学负责相当一块业务，导致问题频频，整个团队的人才梯队也很难补位，人员只能换来换去的临时支撑。</p></li></ol><hr><p>人心不稳定的问题，了解到是整个公司（尤其是 CTO）对前端不满意，原因是产出不高，合作责任意识淡薄，加班少。所以导致前端大量的人员出走。</p><p>这些问题更多是印象问题，要改变这些还是要靠客观事实去改变别人的印象。</p><h2 id="第一阶段-过渡" tabindex="-1">第一阶段 过渡 <a class="header-anchor" href="#第一阶段-过渡" aria-label="Permalink to &quot;第一阶段 过渡&quot;">​</a></h2><ol><li>完成前端团队的人员配置</li><li>解决人员交替带来的运转不畅的问题</li><li>规范前端开发的基本流程</li></ol><h3 id="技术层面" tabindex="-1">技术层面 <a class="header-anchor" href="#技术层面" aria-label="Permalink to &quot;技术层面&quot;">​</a></h3><p>梳理了一下原先的基础建设，发现盘子画的很大，但是都没落地，甚至还有不少就是放了几张截图撑场面，基本不能用。一口吃不成胖子，先做了一些最简单但是最有效的方法。</p><p>utils lint ci 发布 组件库整理...</p><h3 id="流程层面" tabindex="-1">流程层面 <a class="header-anchor" href="#流程层面" aria-label="Permalink to &quot;流程层面&quot;">​</a></h3><p>规范前端开发流程 项目内部每日站会 多维度项目和开发群</p><h3 id="管理层面" tabindex="-1">管理层面 <a class="header-anchor" href="#管理层面" aria-label="Permalink to &quot;管理层面&quot;">​</a></h3><p>首先是根据公司业务情况和成本考虑，人才梯队是 2 个资深，3-4 个中高级，9 个初级，前端分成了三个组，两个负责一般的业务，一个负责基建和需要攻坚的项目。</p><p>花了大概三个月时间，经过技术层面和流程层面的初步改造了解了原先团队中的同学情况，根据责任心、业务能力、技术能力、管理能力、潜力进行了打分，同时通过社招配齐了人员。</p><hr><h4 id="处理" tabindex="-1">处理 <a class="header-anchor" href="#处理" aria-label="Permalink to &quot;处理&quot;">​</a></h4><p>责任心或者能力不够的直接淘汰，责任心和业务能力强的做小组长，责任心和技术能力不错的做 backup。基建小组除了我和另一个资深之外，选择了责任心和潜力不错的同学进组</p><h2 id="第二阶段-凝聚战斗力" tabindex="-1">第二阶段 凝聚战斗力 <a class="header-anchor" href="#第二阶段-凝聚战斗力" aria-label="Permalink to &quot;第二阶段 凝聚战斗力&quot;">​</a></h2><ol><li>增强前端同学的影响力，改变公司其他部门对前端的既有影响</li><li></li></ol><h3 id="技术层面-1" tabindex="-1">技术层面 <a class="header-anchor" href="#技术层面-1" aria-label="Permalink to &quot;技术层面&quot;">​</a></h3><p>组件库 cli 框架 页面搭建系统</p><h3 id="流程层面-1" tabindex="-1">流程层面 <a class="header-anchor" href="#流程层面-1" aria-label="Permalink to &quot;流程层面&quot;">​</a></h3><p>推动落地 jira 技术文档 CodeReview</p><h3 id="管理层面-1" tabindex="-1">管理层面 <a class="header-anchor" href="#管理层面-1" aria-label="Permalink to &quot;管理层面&quot;">​</a></h3><p>制定好前端岗位的职责和评优条件 培养小组长能力，并开始通过虚拟组长挖掘有管理潜力的同学</p><h3 id="成果" tabindex="-1">成果 <a class="header-anchor" href="#成果" aria-label="Permalink to &quot;成果&quot;">​</a></h3><p>年底时候，20 人天完成一个小程序 C 端+B 端 20 个页面，后台页面 20 个页面的商城系统的开发</p><h2 id="第三阶段-形成正循环" tabindex="-1">第三阶段 形成正循环 <a class="header-anchor" href="#第三阶段-形成正循环" aria-label="Permalink to &quot;第三阶段 形成正循环&quot;">​</a></h2><p>业务推动技术，技术反哺业务的正循环</p><hr><h2 id="规范建立" tabindex="-1">规范建立 <a class="header-anchor" href="#规范建立" aria-label="Permalink to &quot;规范建立&quot;">​</a></h2><h3 id="解决阻力" tabindex="-1">解决阻力 <a class="header-anchor" href="#解决阻力" aria-label="Permalink to &quot;解决阻力&quot;">​</a></h3><ol><li>规范是为了降低大家的工作成本</li></ol><p>任何增加大家工作成本的规范都是会有阻力的，比如日报、填工时这些，反过来，像 lint、开发流程规范这些顺水推舟。所以推出一个规范尤其是一些中性的规范，首先是往降低工作成本成本上面去靠拢，比如让大家写技术文档，写注释，项目复盘，表面上是增加了大家的工作内容，但是当你接受其他人的项目时，并且在前端这种情况是非常多的，看到完善的文档，是不是减少了很多认知成本，并且有效降低负面情绪。</p><ol start="2"><li>规范和考核挂钩</li></ol><p>肯定有些规范不是为了降低成员的工作成本，而是降低团队的管理成本和难度的（比如周报）。这些规则往往先需要阐述合理性，然后共情，最后和考核制度的公平性挂钩。无论是待过的团队还是其他朋友口中了解到的，几乎没有打工人不喜欢明确的考核制度。所以说明和考核制度挂钩，虽然会有排斥，但是如果是为了公平，推行的难度也会降低。</p><ol start="3"><li>刺头</li></ol><p>规范就是求公约数的过程，排除掉少数的两面极端情况，最终得出多数人的最大公约数。针对少数人反对的情况，一些是对细节合理性的质疑，这些是有助于规范的完善，完善即可；还有一些单纯的就是不服从，只能私底下针对性的进行了解，看看有没有求同存异的可能，如果实在不合适，那只能安排转岗甚至优化。</p><h2 id="梯队建设" tabindex="-1">梯队建设 <a class="header-anchor" href="#梯队建设" aria-label="Permalink to &quot;梯队建设&quot;">​</a></h2><h3 id="人员构成" tabindex="-1">人员构成 <a class="header-anchor" href="#人员构成" aria-label="Permalink to &quot;人员构成&quot;">​</a></h3><p>业务模式、业务场景、项目难易、公司成本投入</p><h3 id="面试" tabindex="-1">面试 <a class="header-anchor" href="#面试" aria-label="Permalink to &quot;面试&quot;">​</a></h3><p><strong>1. 围绕 STAR</strong></p><p>因为不同阶段的求职者的经验能力是不同的，先遵循 STAR 法则看看求职者的思考和解决问题的能力。针对初级岗位，如果 STAR 阶段说不出太多东西，进入到问答模式就会多问一些，八股文背得好起码说明态度不错而且理解能力起码在线。如果是中高级岗位，STAR 阶段是在整个考核中最核心的部分，问答模式可能也是围绕 STAR 阶段的问题进行深入。</p><p><strong>2. 一问一答</strong></p><p><strong>3. 随便聊聊</strong> 设计一些开放性的问题，系统怎么设计，算法在生活中的运用</p><h2 id="人员管理" tabindex="-1">人员管理 <a class="header-anchor" href="#人员管理" aria-label="Permalink to &quot;人员管理&quot;">​</a></h2><h3 id="绩效" tabindex="-1">绩效 <a class="header-anchor" href="#绩效" aria-label="Permalink to &quot;绩效&quot;">​</a></h3><p><strong>1. 规则先行</strong></p><p>刑不可知则威不可测，无论怎么包裹内核过于主观的绩效评价体系不利于团队发展。除了部门要求的指标（bug 数、故障数等），留给前端主管的主观分部分我也做了细致的分解。</p><ol><li>codeReview</li><li>技术方案、复盘和业务讲解</li><li>基建推进、参与</li><li>分享及分享质量</li></ol><p><strong>2. 绩效的管理能力</strong></p><p>绩效如果是考评或者打分，只是结果的体现而非过程的把握。好的结果需要过程的每一块砖的堆砌，不然容易让绩效变成成员和主管的对抗和拉扯。</p><p>绩效管理一般分为绩效辅导，绩效面谈两大部分。其中绩效辅导我们一般按照“GROW 法则”去执行，即与被辅导的同学之间就 Goal（目标），Reality（现状），Options（方案），Will（承诺执行）这四个部分达成共识。过程中要尽量避免自己主观地去帮同学制定方向，而应该是作为一个教练的角色，指导其自发地去思考这些问题并得出结论，只有内心自发产生的意志，才会更积极主动、更有执行力，别人强加灌输的思想是很难获得认同感的。</p><p>到了绩效面谈环节，基于之前已经达成共识，此时能够比较容易地给出一个公正的评分。需要注意的是在真正的谈话开始之前，进行事前通知，这样能够给双方都留下思考和准备的时间。对于 TL 而言可以预先制定好此次谈话要达到的目标，以及自己所需要准备和搜集的信息资料。谈话结束后，双方需要达成一些共识或改进建议，如果其中有一些需要书面签字确认的，也需要当场完成。这一点在不同公司和团队可能会有差异，具体细节可以事先与 HRBP 做好沟通，避免沟通结果和预期出现偏差。</p><p><strong>3. 充分发挥绩效的最终目的</strong></p><p>绩效制度对公司来说是希望有更好的发展，细分到每个人身上其实就是希望大家发现自己在团队中的位置，在工作中的优缺点。然后我们再去自身情况，制定相应的改进计划，通过个体的提升，聚合到一起达到公司整体的发展。</p><p>当然结果的体现是现实的，但是也是因为这种现实才有提升的动力。</p><p><strong>4. 心慈刀快</strong></p><p>不断发现问题，解决问题的过程中发现彼此不合适，那就要当机立断。这是对双方都有利的选择，彼此勉强只会浪费大家的时间，总需要有一个人提出来结束合作。</p><h3 id="人员安排" tabindex="-1">人员安排 <a class="header-anchor" href="#人员安排" aria-label="Permalink to &quot;人员安排&quot;">​</a></h3><p>努力无能力，没有能力是有多种可能的，缺乏方式方法、缺少锻炼机会、不够聪明。</p><ul><li>针对缺乏方式方法，多培训多面谈，开点小灶，这个过程中也能多对这个成员有更好的了解；</li><li>缺少锻炼机会，在对成员有了一定的了解基础上，给予适合的挑战机会，试一试成色，行挑战难度就往上升，不行挑战难度就往下降；</li><li>不够聪明，平和的说出对方的问题，一方面是一种预期管理，另一方面也是一种激励，让团队同学更好地认识自己，不聪明不一定不能成功，只是需要更多的积累。</li></ul>',65),o=[t];function h(n,p,s,d,c,u){return i(),e("div",null,o)}const m=a(r,[["render",h]]);export{q as __pageData,m as default};
