import{_ as t,c as r,m as a,a as i,t as l,U as o,o as h}from"./chunks/framework.qvcCyPxx.js";const x=JSON.parse('{"title":"低代码","description":"","frontmatter":{"title":"低代码"},"headers":[],"relativePath":"interview/architecture/low-code/index.md","filePath":"interview/architecture/low-code/index.md"}'),n={name:"interview/architecture/low-code/index.md"},d={id:"frontmatter-title",tabindex:"-1"},c=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),s=o('<h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>通过低代码平台开发治安管理、案审法制文书寄递等一系列业务应用，与公安内网系统相辅相成，真正解决民警在工作中的难题，大幅节省警力。同时运用流程在线、PC 端移动端同步等特点，结合从市公安局机关到各公安分/县局再到各分/县局群众力量组织的三层关联组织架构，贯穿线性组织，形成矩阵型架构，实现高效协作。</p><h2 id="项目定位" tabindex="-1">项目定位 <a class="header-anchor" href="#项目定位" aria-label="Permalink to &quot;项目定位&quot;">​</a></h2><ol><li>使用人员是公安民警和公司的业务人员，页面大多是增删改查等简单功能的堆砌</li><li>人力资源前端一共 2 个人</li></ol><p>产品功能定位专用型、偏前端驱动</p><h2 id="架构" tabindex="-1">架构 <a class="header-anchor" href="#架构" aria-label="Permalink to &quot;架构&quot;">​</a></h2><h3 id="物料" tabindex="-1">物料 <a class="header-anchor" href="#物料" aria-label="Permalink to &quot;物料&quot;">​</a></h3><h4 id="物料库" tabindex="-1"><a href="/resume/interview/architecture/material-system.html">物料库</a> <a class="header-anchor" href="#物料库" aria-label="Permalink to &quot;[物料库](/interview/architecture/material-system)&quot;">​</a></h4><p><strong>1. 对接协议</strong></p><ul><li>物料类型 I/O Event Container Translater，生成基本的属性配置</li><li>自带的属性 type fontSize color width layoutWidth 等</li><li>自定义可编辑属性（修改和自定义属性需要调用低代码的属性对象），组织机构弹框：内部多接口调用，定义 分类、区块、字段名、字段值、值类型（枚举值回调函数）</li><li>上层组件劫持属性/事件 onChange value source 等</li></ul><p><strong>2. 接入方式</strong></p><ul><li>npm 包</li></ul><p>TODO:热插拔,两个思路</p><ol><li>用沙盒，如果只有画板嵌套在 iframe 里，鼠标事件的捕获在两个页面跳转，中间的交互会非常难受。如果整个页面都变成沙盒，应该可行，但是太不优雅了</li><li>在 markup 之上再加一层 JSONSchema 的协议，纯 JSON 数据驱动页面渲染，问题在于协议的制定会比较麻烦，而且好像很难避免使用 eval 执行函数</li></ol><h4 id="模版组件" tabindex="-1">模版组件 <a class="header-anchor" href="#模版组件" aria-label="Permalink to &quot;模版组件&quot;">​</a></h4><p>用户自己在页面中保存的组件</p><h4 id="建模组件" tabindex="-1">建模组件 <a class="header-anchor" href="#建模组件" aria-label="Permalink to &quot;建模组件&quot;">​</a></h4><p>根据后端的数据类型进行建模</p><h4 id="解析器组件" tabindex="-1">解析器组件 <a class="header-anchor" href="#解析器组件" aria-label="Permalink to &quot;解析器组件&quot;">​</a></h4><p>与页面解析器深度耦合</p><h3 id="可视化设计器" tabindex="-1">可视化设计器 <a class="header-anchor" href="#可视化设计器" aria-label="Permalink to &quot;可视化设计器&quot;">​</a></h3><h4 id="页面搭建" tabindex="-1">页面搭建 <a class="header-anchor" href="#页面搭建" aria-label="Permalink to &quot;页面搭建&quot;">​</a></h4><h4 id="数据建模" tabindex="-1">数据建模 <a class="header-anchor" href="#数据建模" aria-label="Permalink to &quot;数据建模&quot;">​</a></h4><p>根据后端的数据类型进行建模</p><h4 id="组件设计" tabindex="-1">组件设计 <a class="header-anchor" href="#组件设计" aria-label="Permalink to &quot;组件设计&quot;">​</a></h4><p><code>c-type</code> 指定组件类型 <code>m-type</code> 指定物料类型（不同物料类型，属性中对上下文的处理方式不同，为了减少认知差异，也是因此，解析器组件因为会改变内部组件的上下文导致耦合度比较大，去掉和低代码平台中间的粘合层使其成为正常组件难度较大） <code>properties</code>组装属性</p><h4 id="property-设计" tabindex="-1">property 设计 <a class="header-anchor" href="#property-设计" aria-label="Permalink to &quot;property 设计&quot;">​</a></h4><p>属性对象，对属性行为进行抽象，方便数据存储同时同步编辑器和编译器的行为，基础属性对象（name，key，attrContainer）、样式属性对象、事件属性对象（eventNode）、定制属性对象。</p><ul><li>组件栏展示组件信息</li><li>样式属性生成内联样式</li><li>事件属性存储事件流程信息，并根据上下文执行信息中的内容</li></ul><h4 id="数据版本控制" tabindex="-1">数据版本控制 <a class="header-anchor" href="#数据版本控制" aria-label="Permalink to &quot;数据版本控制&quot;">​</a></h4><p>因为是 web，所以默认加载的都是最新代码，所以只涉及到向前兼容的问题，管道模式，数据兼容。（是否可以下放到组件去维护，各个组件自己维护版本升级导致数据的变动，全局针对全局的版本变动）</p><h4 id="调试预览" tabindex="-1">调试预览 <a class="header-anchor" href="#调试预览" aria-label="Permalink to &quot;调试预览&quot;">​</a></h4><p>通过编译器展示页面</p><h4 id="代码生成" tabindex="-1">代码生成 <a class="header-anchor" href="#代码生成" aria-label="Permalink to &quot;代码生成&quot;">​</a></h4><ol><li>项目已经存在，调用接口返回的页面配置数据渲染对应的页面</li><li>项目不存在，使用<a href="/resume/interview/architecture/scaffold.html">脚手架</a>一键生成基于低代码渲染引擎的前端项目</li></ol><p>TODO:生成原始代码</p><p>依赖低代码渲染引擎的，生成对应的 vue 文件，可以在任意项目中运行</p><h3 id="事件编辑器-antv" tabindex="-1">事件编辑器(antv) <a class="header-anchor" href="#事件编辑器-antv" aria-label="Permalink to &quot;事件编辑器(antv)&quot;">​</a></h3><p>Object 流程文件：用来定义事件的流程信息，包括功能层面的节点类型，跳转条件，节点绑定的函数，下个节点信息，展示层面的节点位置、样式等。</p><p>上下文容器：负责存放流程引擎启动时的一些全局数据（比如页面的组件信息、页面流程接口信息），以流程运行过程中的缓存数据等。</p><p>流程模型模块：定义流程中的节点类型，连线等。</p><p>解析模块：负责解析 Object 文档信息，使之能根据设计好的流程执行对应的功能。</p><p>代码粘合器，表单修改数据。</p><h3 id="流程编辑器-antv" tabindex="-1">流程编辑器(antv) <a class="header-anchor" href="#流程编辑器-antv" aria-label="Permalink to &quot;流程编辑器(antv)&quot;">​</a></h3><p>和事件编辑器相似</p><ol><li>纬度提升到页面级</li><li>函数的最终执行者后端接口服务</li></ol><h3 id="编译器-解析器" tabindex="-1">编译器（解析器） <a class="header-anchor" href="#编译器-解析器" aria-label="Permalink to &quot;编译器（解析器）&quot;">​</a></h3><ul><li>表单解析器（markupForm）</li><li>列表解析器（markupTable）</li><li>事件解析器</li><li>页面解析器</li><li>其他扩充解析器</li></ul><h4 id="表单解析器" tabindex="-1">表单解析器 <a class="header-anchor" href="#表单解析器" aria-label="Permalink to &quot;表单解析器&quot;">​</a></h4><h5 id="字段管理" tabindex="-1">字段管理 <a class="header-anchor" href="#字段管理" aria-label="Permalink to &quot;字段管理&quot;">​</a></h5><p>控制字段的类型、增删改查、显示隐藏、是否需要检验等等功能</p><h5 id="字段模型" tabindex="-1">字段模型 <a class="header-anchor" href="#字段模型" aria-label="Permalink to &quot;字段模型&quot;">​</a></h5><p>InputOutputField，主要负责管理非自增型字段状态，比如 Input/Select/NumberPicker/DatePicker 这些组件 ArrayField，负责管理数组字段状态，可以对列表项进行增删移动的。 ObjectField ，主要负责管理自增对象字段状态，可以对对象的 key 做增删操作。 OutputField ，主要负责管理只读数据的字段，比如数据展示（text、card 等）、事件触发等相关的组件。</p><h5 id="路径系统" tabindex="-1">路径系统 <a class="header-anchor" href="#路径系统" aria-label="Permalink to &quot;路径系统&quot;">​</a></h5><p>路径系统主要给表单模型提供了以下几个能力：</p><ul><li>从字段集中查找任意一个字段，同时支持按照规则批量查找</li><li>表达字段间关系的模型，借助路径系统，可以快速找到某个节点的父子兄弟节点</li><li>实现字段数据的读写，带解构的数据读写</li></ul><h5 id="校验功能" tabindex="-1">校验功能 <a class="header-anchor" href="#校验功能" aria-label="Permalink to &quot;校验功能&quot;">​</a></h5><h5 id="联动功能" tabindex="-1">联动功能 <a class="header-anchor" href="#联动功能" aria-label="Permalink to &quot;联动功能&quot;">​</a></h5><h5 id="数据管理" tabindex="-1">数据管理 <a class="header-anchor" href="#数据管理" aria-label="Permalink to &quot;数据管理&quot;">​</a></h5><p>表单值(values)管理 表单默认值(initialValues)管理 字段值(value)管理 字段默认值(initialValue)管理 值与默认值的选择合并策略</p>',60);function u(e,p,b,m,q,f){return h(),r("div",null,[a("h1",d,[i(l(e.$frontmatter.title)+" ",1),c]),s])}const P=t(n,[["render",u]]);export{x as __pageData,P as default};
